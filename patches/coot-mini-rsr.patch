+++ coot-1.0/ideal/mini-rsr.cc	2021-05-10 18:06:09.000000000 +0100
--- ../coot-1.0/ideal/mini-rsr.cc	2022-06-29 09:47:13.000000000 +0100
@@ -1,3 +1,4 @@
+#ifndef _MINI_RSR_MAIN_
 /* ideal/with-map.cc
  * 
  * Copyright 2002, 2003 The University of York
@@ -258,7 +259,7 @@ execute_crankshaft(const coot::residue_spec_t &rs, int n_peptides, const clipper
 }
 
 int
-main(int argc, char **argv) {
+mini_rsr_main(int argc, char **argv) {
 
 #ifndef HAVE_GSL
    std::cout << "We don't have GSL, this program does nothing" << std::endl;
@@ -486,6 +487,7 @@ main(int argc, char **argv) {
 		  make_trans_peptide_restraints = true;
 
 	       int n_threads = coot::get_max_number_of_threads();
+               n_threads = std::min(n_threads,4); // 4 is the PTHREAD_POOL_SIZE set in CMakeLists.txt for emscripten.
 	       ctpl::thread_pool thread_pool(n_threads);
 	       restraints.thread_pool(&thread_pool, n_threads);
 
@@ -652,6 +654,7 @@ map_from_mtz(std::string mtz_file_name,
       std::cout << "Failed to read mtz file " << mtz_file_name << std::endl;
    }
 
+   std::cout << "Returning map and status " << status << std::endl;
    return std::pair<bool, clipper::Xmap<float> > (status, xmap);
 }
 
@@ -925,3 +928,13 @@ get_input_details(int argc, char **argv) {
 	    
    return d;
 }
+
+#else // _MINI_RSR_MAIN_
+#include <iostream>
+int mini_rsr_main(int argc, char **argv);
+int main(int argc, char **argv) {
+    int rc = mini_rsr_main(argc,argv);
+    std::cout << "rc: " << rc << std::endl;
+    return rc;
+}
+#endif // _MINI_RSR_MAIN_
+++ coot-1.0/coot-utils/contacts-by-bricks.cc	2021-05-10 18:06:09.000000000 +0100
--- ../coot-1.0/coot-utils/contacts-by-bricks.cc	2022-06-23 15:09:56.000000000 +0100
@@ -206,9 +206,9 @@
 coot::contacts_by_bricks::find_the_contacts_between_bricks(std::vector<std::set<unsigned int> > *vec_p,
                                                            bool only_between_different_residues_flag) const {
 
-   // find_the_contacts_between_bricks_simple(vec_p);
+    find_the_contacts_between_bricks_simple(vec_p, only_between_different_residues_flag);
 
-   find_the_contacts_between_bricks_multi_thread(vec_p, only_between_different_residues_flag);
+   //find_the_contacts_between_bricks_multi_thread(vec_p, only_between_different_residues_flag);
 
    if (false) {
       for (std::size_t ii=0; ii<vec_p->size(); ii++) {
+++ coot-1.0/geometry/cif-parse-link.cc	2021-05-10 18:06:09.000000000 +0100
--- ../coot-1.0/geometry/cif-parse-link.cc	2022-06-28 18:15:52.000000000 +0100
@@ -908,7 +908,7 @@
       rte += "\" \"";
       rte += comp_id_2;
       rte += "\"";
-      throw std::runtime_error(rte);
+      //throw std::runtime_error(rte);
    }
    if (debug)
       std::cout << "DEBUG:: matching_chem_link() returns " << matching_chem_links.size()
+++ coot-1.0/ideal/ng.cc	2021-06-09 08:08:45.000000000 +0100
--- ../coot-1.0/ideal/ng.cc	2022-06-28 18:21:03.000000000 +0100
@@ -112,7 +112,8 @@ coot::restraints_container_t::make_restraints_ng(int imol,
          std::cout << "ERROR:: Bad things will now happen" << std::endl;
       }

-      make_non_bonded_contact_restraints_using_threads_ng(imol, geom);
+      //make_non_bonded_contact_restraints_using_threads_ng(imol, geom);
+      make_non_bonded_contact_restraints_ng(imol, geom);
       auto tp_5 = std::chrono::high_resolution_clock::now();

       if (do_rama_plot_restraints)
@@ -1389,12 +1390,12 @@ coot::restraints_container_t::make_non_bonded_contact_restraints_ng(int imol,
          non_bonded_contacts_atom_indices[i].insert(j);
          simple_restraint::nbc_function_t nbcf = simple_restraint::LENNARD_JONES;
          simple_restraint r(NON_BONDED_CONTACT_RESTRAINT,
-                            nbcf, i, *it,
+                            nbcf, i, *it_inner,
                             is_H_non_bonded_contact,
                             fixed_atom_flags, dist_min);
          if (false) // debug
-            std::cout << "Adding NBC " << i << " " << *it << " " << energy_type_for_atom[i] << " "
-                              << energy_type_for_atom[*it] << " "
+            std::cout << "Adding NBC " << i << " " << *it_inner << " " << energy_type_for_atom[i] << " "
+                              << energy_type_for_atom[*it_inner] << " "
                               << is_H_non_bonded_contact << " "
                               << fixed_atom_flags[0] << " " << fixed_atom_flags[1] << " "
                               << dist_min <<  "\n";

